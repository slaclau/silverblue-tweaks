---
name: Build Custom Image
on:
  workflow_call:
    inputs:
      image_flavour:
        description: Flavour to build
        required: true
        default: main
        type: string
      base_name:
        description: The Base Image to build
        required: true
        default: silverblue-tweaks
        type: string
      stream_name:
        description: "The Fedora Version: gts, stable, or latest"
        required: true
        type: string
      kernel_pin:
        description: "The full kernel version to pin"
        type: string
      push:
        description: "Whether to push the built image"
        type: boolean
        required: true

env:
  IMAGE_REGISTRY: ghcr.io/${{ github.repository_owner }}

jobs:
  build_push:
    name: Build and push image
    runs-on: ubuntu-24.04

    steps:
      # These stage versions are pinned by https://github.com/renovatebot/renovate
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4

      - name: Install Just
        shell: bash
        run: bash .github/workflows/shared/install-just.sh

      - name: Maximize Build Space
        uses: ublue-os/remove-unwanted-software@v9

      - name: Get Image Name
        run: |
          IMAGE_NAME="$(just image_name ${{ inputs.base_name }} ${{ inputs.stream_name }} ${{ inputs.image_flavour }})"
          echo "Image Name: ${IMAGE_NAME}"
          echo "IMAGE_NAME=${IMAGE_NAME}" >> $GITHUB_ENV

      - name: Get Default Tag
        run: |
          DEFAULT_TAG="$(just generate-default-tag ${{ inputs.stream_name }} 1)"
          echo "Default Tag: ${DEFAULT_TAG}"
          echo "DEFAULT_TAG=${DEFAULT_TAG}" >> $GITHUB_ENV

      - name: Build Image
        shell: bash
        run: sudo just build ${{ inputs.base_name }} ${{ inputs.stream_name }} ${{ inputs.image_flavour }}

      - name: Rechunk Image
        shell: bash
        run: sudo just rechunk ${{ inputs.base_name }} ${{ inputs.stream_name }} ${{ inputs.image_flavour }}

      - name: Load Image
        shell: bash
        run: just load-image ${{ inputs.base_name }} ${{ inputs.stream_name }} ${{ inputs.image_flavour }}

      - name: Get Tags
        shell: bash
        run: |
          TAGS="$(just generate-build-tags \
            "${{ inputs.base_name }}" \
            "${{ inputs.stream_name }}" \
            "${{ inputs.image_flavour }}" \
            "${{ inputs.kernel_pin }}" \
            "1" \
            "$(podman inspect ${{ env.IMAGE_NAME }}:${{ env.DEFAULT_TAG }} | jq -r '.[].Config.Labels["org.opencontainers.image.version"]')" \
            "${{ github.event_name }}" \
            "${{ github.event.number }}")"
          echo "Tags: ${TAGS}"
          echo "TAGS=${TAGS}" >> $GITHUB_ENV

      - name: Tag Image
        shell: bash
        run: just tag-images ${{ env.IMAGE_NAME }} ${{ inputs.stream_name }} "${{ env.TAGS }}"

      - name: Lowercase Registry
        id: registry_case
        uses: ASzc/change-string-case-action@v6
        with:
          string: ${{ env.IMAGE_REGISTRY }}

#      - name: Check Secureboot
#        id: secureboot
#        shell: bash
#        run: |
#          just secureboot ${{ env.IMAGE_NAME }}

      - name: Push to GHCR
        if: ${{ inputs.push == true }}
        id: push
        env:
          REGISTRY_USER: ${{ github.actor }}
          REGISTRY_PASSWORD: ${{ github.token }}
        uses: redhat-actions/push-to-registry@v2
        with:
          image: ${{ env.IMAGE_NAME }}
          tags: ${{ env.TAGS }}
          registry: ${{ steps.registry_case.outputs.lowercase }}
          username: ${{ env.REGISTRY_USER }}
          password: ${{ env.REGISTRY_PASSWORD }}
          extra-args: --disable-content-trust

      - name: Login to GitHub Container Registry
        uses: docker/login-action@9780b0c442fbb1117ed29e0efdff1e18412f7567 # v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Install Cosign
        uses: sigstore/cosign-installer@d7d6bc7722e3daa8354c50bcb52f4837da5e9b6a # v3.8.1

      - name: Sign container image
        run: |
          IMAGE_FULL="${{ steps.registry_case.outputs.lowercase }}/${{ env.IMAGE_NAME }}"
          for tag in ${{ env.TAGS }}; do
            cosign sign -y --key env://COSIGN_PRIVATE_KEY $IMAGE_FULL:$tag
          done
        env:
          COSIGN_EXPERIMENTAL: false
          COSIGN_PRIVATE_KEY: ${{ secrets.SIGNING_SECRET }}
